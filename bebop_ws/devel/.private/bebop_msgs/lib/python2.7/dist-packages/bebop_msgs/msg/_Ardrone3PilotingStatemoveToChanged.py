# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bebop_msgs/Ardrone3PilotingStatemoveToChanged.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Ardrone3PilotingStatemoveToChanged(genpy.Message):
  _md5sum = "f356580a128658358cde541e12e3218b"
  _type = "bebop_msgs/Ardrone3PilotingStatemoveToChanged"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Ardrone3PilotingStatemoveToChanged
# auto-generated from up stream XML files at
#   github.com/Parrot-Developers/libARCommands/tree/master/Xml
# To check upstream commit hash, refer to last_build_info file
# Do not modify this file by hand. Check scripts/meta folder for generator files.
#
# SDK Comment: The drone moves or moved to a given location.

Header header

# Latitude of the location (in degrees) to reach
float64 latitude
# Longitude of the location (in degrees) to reach
float64 longitude
# Altitude above sea level (in m) to reach
float64 altitude
# Orientation mode of the move to
uint8 orientation_mode_NONE=0  # The drone wont change its orientation
uint8 orientation_mode_TO_TARGET=1  # The drone will make a rotation to look in direction of the given location
uint8 orientation_mode_HEADING_START=2  # The drone will orientate itself to the given heading before moving to the location
uint8 orientation_mode_HEADING_DURING=3  # The drone will orientate itself to the given heading while moving to the location
uint8 orientation_mode
# Heading (relative to the North in degrees). This value is only used if the orientation mode is HEADING_START or HEADING_DURING
float32 heading
# Status of the move to
uint8 status_RUNNING=0  # The drone is actually flying to the given position
uint8 status_DONE=1  # The drone has reached the target
uint8 status_CANCELED=2  # The move to has been canceled, either by a new moveTo command or by a CancelMoveTo command.
uint8 status_ERROR=3  # The move to has not been finished or started because of an error.
uint8 status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  orientation_mode_NONE = 0
  orientation_mode_TO_TARGET = 1
  orientation_mode_HEADING_START = 2
  orientation_mode_HEADING_DURING = 3
  status_RUNNING = 0
  status_DONE = 1
  status_CANCELED = 2
  status_ERROR = 3

  __slots__ = ['header','latitude','longitude','altitude','orientation_mode','heading','status']
  _slot_types = ['std_msgs/Header','float64','float64','float64','uint8','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,latitude,longitude,altitude,orientation_mode,heading,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ardrone3PilotingStatemoveToChanged, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.orientation_mode is None:
        self.orientation_mode = 0
      if self.heading is None:
        self.heading = 0.
      if self.status is None:
        self.status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.orientation_mode = 0
      self.heading = 0.
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3dBfB().pack(_x.latitude, _x.longitude, _x.altitude, _x.orientation_mode, _x.heading, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.latitude, _x.longitude, _x.altitude, _x.orientation_mode, _x.heading, _x.status,) = _get_struct_3dBfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3dBfB().pack(_x.latitude, _x.longitude, _x.altitude, _x.orientation_mode, _x.heading, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.latitude, _x.longitude, _x.altitude, _x.orientation_mode, _x.heading, _x.status,) = _get_struct_3dBfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3dBfB = None
def _get_struct_3dBfB():
    global _struct_3dBfB
    if _struct_3dBfB is None:
        _struct_3dBfB = struct.Struct("<3dBfB")
    return _struct_3dBfB
